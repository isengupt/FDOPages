import { __rest } from "tslib";
import React, { Children } from 'react';
import classnames from 'classnames';
import { connectField, filterDOMProps, joinName } from 'uniforms';
import ListItemField from './ListItemField';
import ListAddField from './ListAddField';
const List = (_a) => {
    var { children, className, disabled, error, errorMessage, initialCount, itemProps, label, name, required, showInlineError, value } = _a, props = __rest(_a, ["children", "className", "disabled", "error", "errorMessage", "initialCount", "itemProps", "label", "name", "required", "showInlineError", "value"]);
    return (React.createElement("div", Object.assign({ className: classnames('ui', className, { disabled }, 'grouped fitted fields list') }, filterDOMProps(props)),
        label && (React.createElement("div", { className: classnames({ error, required }, 'field item') },
            React.createElement("label", { className: "left floated" }, label),
            React.createElement(ListAddField, { name: `${name}.$`, initialCount: initialCount, className: "right floated" }))),
        label && React.createElement("div", { className: "ui fitted hidden clearing horizontal divider" }),
        !!(error && showInlineError) && (React.createElement("div", { className: "ui red basic label" }, errorMessage)),
        children
            ? value.map((item, index) => Children.map(children, child => React.cloneElement(child, {
                key: index,
                label: null,
                name: joinName(name, child.props.name && child.props.name.replace('$', index)),
            })))
            : value.map((item, index) => (React.createElement(ListItemField, Object.assign({ key: index, label: null, name: joinName(name, index) }, itemProps))))));
};
export default connectField(List, {
    ensureValue: false,
    includeInChain: false,
});

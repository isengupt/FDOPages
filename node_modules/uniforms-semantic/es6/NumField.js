import { __rest } from "tslib";
import React, { Component } from 'react';
import classnames from 'classnames';
import { connectField, filterDOMProps } from 'uniforms';
const noneIfNaN = x => (isNaN(x) ? undefined : x);
const parse = (decimal, x) => noneIfNaN((decimal ? parseFloat : parseInt)(x));
const Num_ = (_a) => {
    var { className, decimal, disabled, error, errorMessage, icon, iconLeft, iconProps, id, inputRef, label, max, min, name, onChange, placeholder, required, showInlineError, step, value, wrapClassName } = _a, props = __rest(_a, ["className", "decimal", "disabled", "error", "errorMessage", "icon", "iconLeft", "iconProps", "id", "inputRef", "label", "max", "min", "name", "onChange", "placeholder", "required", "showInlineError", "step", "value", "wrapClassName"]);
    return (React.createElement("div", Object.assign({ className: classnames(className, { disabled, error, required }, 'field') }, filterDOMProps(props)),
        label && React.createElement("label", { htmlFor: id }, label),
        React.createElement("div", { className: classnames('ui', wrapClassName, { left: iconLeft, icon: icon || iconLeft }, 'input') },
            React.createElement("input", { disabled: disabled, id: id, max: max, min: min, name: name, onChange: onChange, placeholder: placeholder, ref: inputRef, step: step || (decimal ? 0.01 : 1), type: "number", value: value }),
            (icon || iconLeft) && (React.createElement("i", Object.assign({ className: `${icon || iconLeft} icon` }, iconProps)))),
        !!(error && showInlineError) && (React.createElement("div", { className: "ui red basic pointing label" }, errorMessage))));
};
let Num;
// istanbul ignore next
if (parseInt(React.version, 10) < 16) {
    Num = class Num extends Component {
        constructor() {
            super(...arguments);
            this.state = { value: '' + this.props.value };
            this.onChange = event => {
                const value = event.target.value.replace(/[^\d.,-]/g, '');
                this.setState({ value });
                this.props.onChange(parse(this.props.decimal, value));
            };
        }
        componentWillReceiveProps({ decimal, value }) {
            if (parse(decimal, value) !==
                parse(decimal, this.state.value.replace(/[.,]+$/, ''))) {
                this.setState({
                    value: value === undefined || value === '' ? '' : '' + value,
                });
            }
        }
        render() {
            return Num_(Object.assign(Object.assign({}, this.props), { onChange: this.onChange, value: this.state.value }));
        }
    };
}
else {
    Num = props => Num_(Object.assign(Object.assign({}, props), { onChange(event) {
            props.onChange(parse(props.decimal, event.target.value));
        } }));
}
export default connectField(Num);

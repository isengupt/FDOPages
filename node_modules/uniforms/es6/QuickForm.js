import { __rest } from "tslib";
import PropTypes from 'prop-types';
import React from 'react';
import BaseForm from './BaseForm';
import nothing from './nothing';
const Quick = (parent) => {
    class _ extends parent {
        getNativeFormProps() {
            const _a = super.getNativeFormProps(), { autoField: AutoField = this.getAutoField(), errorsField: ErrorsField = this.getErrorsField(), submitField: SubmitField = this.getSubmitField() } = _a, props = __rest(_a, ["autoField", "errorsField", "submitField"]);
            if (!props.children) {
                props.children = this.getChildContextSchema()
                    .getSubfields()
                    .map((key) => React.createElement(AutoField, { key: key, name: key }))
                    .concat([
                    React.createElement(ErrorsField, { key: "$ErrorsField" }),
                    React.createElement(SubmitField, { key: "$SubmitField" }),
                ]);
            }
            return props;
        }
        getAutoField() {
            return () => nothing;
        }
        getErrorsField() {
            return () => nothing;
        }
        getSubmitField() {
            return () => nothing;
        }
    }
    _.Quick = Quick;
    _.displayName = `Quick${parent.displayName}`;
    _.propTypes = Object.assign(Object.assign({}, parent.propTypes), { autoField: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), errorsField: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), submitField: PropTypes.oneOfType([PropTypes.func, PropTypes.string]) });
    return _;
};
export default Quick(BaseForm);
